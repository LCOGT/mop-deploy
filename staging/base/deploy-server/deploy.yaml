# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master-standalone/deployment-apps-v1.json
apiVersion: apps/v1
kind: Deployment
metadata: # kpt-merge: /example
  # Name will be used as the value for the `app.kubernetes.io/component`
  # selector label and updated automatically by `kpt fn render`.
  # So no need to set those manually.
  name: server
  labels:
    app.kubernetes.io/component: server
  annotations:
    internal.kpt.dev/upstream-identifier: 'apps|Deployment|default|example'
spec:
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: specutils
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: astropy
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: static
          emptyDir:
            sizeLimit: 32Mi
      initContainers:
        - name: check-db-ready
          image: "postgres:14-alpine"
          command:
            - sh
            - -c
            - |
              until pg_isready;
                do echo waiting for database;
                sleep 1;
                done;
          env:
            - name: PGHOST
              valueFrom:
                configMapKeyRef:
                  name: env
                  key: DB_HOST
                  optional: false
            - name: PGDATABASE
              valueFrom:
                configMapKeyRef:
                  name: env
                  key: DB_NAME
                  optional: false
            - name: PGUSER
              valueFrom:
                configMapKeyRef:
                  name: env
                  key: DB_USER
                  optional: false
            - name: PGPORT
              valueFrom:
                configMapKeyRef:
                  name: env
                  key: DB_PORT
                  optional: false
          envFrom:
            - configMapRef:
                name: env
                optional: false
            - secretRef:
                name: env
                optional: false
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
        - name: apply-db-migrations
          image: "mop"
          command:
            - python
            - manage.py
            - migrate
            - --no-input
          envFrom:
            - configMapRef:
                name: env
                optional: false
            - secretRef:
                name: env
                optional: false
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: specutils
              mountPath: /.specutils
              readOnly: false
            - name: astropy
              mountPath: /.astropy
              readOnly: false
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
        - name: django-collectstatic
          image: "mop"
          command:
            - python
            - manage.py
            - collectstatic
            - --no-input
          envFrom:
            - configMapRef:
                name: env
                optional: false
            - secretRef:
                name: env
                optional: false
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: specutils
              mountPath: /.specutils
              readOnly: false
            - name: astropy
              mountPath: /.astropy
              readOnly: false
            - name: static
              mountPath: /static
              readOnly: false
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
      containers:
        - name: default
          image: "mop"
          command:
            - gunicorn
            - --bind=0.0.0.0:8080
            - --worker-class=gevent
            - --workers=$(GUNICORN_WORKERS)
            - --timeout=$(GUNICORN_TIMEOUT)
            - --access-logfile=-
            - --error-logfile=-
            - mop.wsgi
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: GUNICORN_WORKERS
              value: "2"
            - name: GUNICORN_TIMEOUT
              value: "300"
          envFrom:
            - configMapRef:
                name: env
                optional: false
            - secretRef:
                name: env
                optional: false
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: specutils
              mountPath: /.specutils
              readOnly: false
            - name: astropy
              mountPath: /.astropy
              readOnly: false
            - name: static
              mountPath: /static
              readOnly: false
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
